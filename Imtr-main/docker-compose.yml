version: '3.8'

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: imtr_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: imtr_school_management
      MYSQL_USER: imtr_user
      MYSQL_PASSWORD: imtr_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/sequelize/init:/docker-entrypoint-initdb.d
    networks:
      - imtr_network
    command: --default-authentication-plugin=mysql_native_password

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: imtr_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - imtr_network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: imtr_minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - imtr_network
    command: server /data --console-address ":9001"

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: imtr_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - imtr_network

  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: imtr_api
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DB_HOST: db
      DB_PORT: 3306
      DB_NAME: imtr_school_management
      DB_USER: imtr_user
      DB_PASSWORD: imtr_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads
    depends_on:
      - db
      - redis
      - minio
      - mailhog
    networks:
      - imtr_network
    command: npm run dev

  # Frontend Web App
  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: imtr_web
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001/api/v1
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api
    networks:
      - imtr_network
    command: npm run dev

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: imtr_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - web
    networks:
      - imtr_network

volumes:
  mysql_data:
  redis_data:
  minio_data:

networks:
  imtr_network:
    driver: bridge
